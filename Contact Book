import json

class Contact:
    def __init__(self, name, phone_number, email, address):
        self.name = name
        self.phone_number = phone_number
        self.email = email
        self.address = address

    def to_dict(self):
        return {
            "name": self.name,
            "phone_number": self.phone_number,
            "email": self.email,
            "address": self.address
        }

    @staticmethod
    def from_dict(data):
        return Contact(data["name"], data["phone_number"], data["email"], data["address"])

class ContactManager:
    def __init__(self):
        self.contacts = []  # Initialize an empty list to store contacts

    def add_contact(self, contact):
        self.contacts.append(contact)  # Add a new contact to the list

    def view_contacts(self):
        print("Contact List:")
        for contact in self.contacts:
            print(f"Name: {contact.name}, Phone: {contact.phone_number}")

    def search_contact(self, query):
        results = []
        for contact in self.contacts:
            # Check if the query matches the name (case insensitive) or phone number of any contact
            if query.lower() in contact.name.lower() or query in contact.phone_number:
                results.append(contact)
        return results

    def update_contact(self, old_name, new_contact):
        for i, contact in enumerate(self.contacts):
            if contact.name.lower() == old_name.lower():
                self.contacts[i] = new_contact  # Update the contact with new information
                break

    def delete_contact(self, name):
        # Create a new list excluding the contact with the specified name (case insensitive)
        self.contacts = [contact for contact in self.contacts if contact.name.lower() != name.lower()]

    def save_contacts_to_file(self, filename):
        # Save contacts data to a JSON file
        with open(filename, 'w') as file:
            data = [contact.to_dict() for contact in self.contacts]
            json.dump(data, file, indent=4)

    def load_contacts_from_file(self, filename):
        try:
            # Load contacts data from a JSON file
            with open(filename, 'r') as file:
                data = json.load(file)
                self.contacts = [Contact.from_dict(contact_data) for contact_data in data]
        except FileNotFoundError:
            print("File not found. No contacts loaded.")

def main():
    contact_manager = ContactManager()
    filename = "contacts.json"
    contact_manager.load_contacts_from_file(filename)  # Load contacts from file at startup

    while True:
        print("\nContact Management System:")
        print("1. Add Contact")
        print("2. View Contact List")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Save Contacts to File")
        print("7. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            # Prompt user for contact details and add the contact to the manager
            name = input("Enter name: ")
            phone_number = input("Enter phone number: ")
            email = input("Enter email: ")
            address = input("Enter address: ")
            contact = Contact(name, phone_number, email, address)
            contact_manager.add_contact(contact)
            print("Contact added successfully!")

        elif choice == '2':
            # Display all contacts in the manager
            contact_manager.view_contacts()

        elif choice == '3':
            # Prompt user for a search query and display matching contacts
            query = input("Enter name or phone number to search: ")
            results = contact_manager.search_contact(query)
            if results:
                print("Search results:")
                for contact in results:
                    print(f"Name: {contact.name}, Phone: {contact.phone_number}")
            else:
                print("No matching contacts found.")

        elif choice == '4':
            # Prompt user for the contact to update and update its information
            name = input("Enter the name of the contact to update: ")
            results = contact_manager.search_contact(name)
            if results:
                new_name = input("Enter new name: ")
                new_phone_number = input("Enter new phone number: ")
                new_email = input("Enter new email: ")
                new_address = input("Enter new address: ")
                new_contact = Contact(new_name, new_phone_number, new_email, new_address)
                contact_manager.update_contact(name, new_contact)
                print("Contact updated successfully!")
            else:
                print("Contact not found.")

        elif choice == '5':
            # Prompt user for the contact to delete and remove it from the manager
            name = input("Enter the name of the contact to delete: ")
            contact_manager.delete_contact(name)
            print("Contact deleted successfully!")

        elif choice == '6':
            # Save contacts data to a file
            contact_manager.save_contacts_to_file(filename)
            print("Contacts saved to file.")

        elif choice == '7':
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please enter a number from 1 to 7.")

if __name__ == "__main__":
    main()
